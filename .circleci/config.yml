# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference - status
version: 2.1


orbs:
  circleci-maven-release-orb: sonatype-nexus-community/circleci-maven-release-orb@0.0.16

#jobs:
#  build:
#    docker:
#       - image: 'circleci/openjdk:8-jdk'
#    steps:
#       - checkout
#       - run:
#           name: Decode base 64
#           command: echo "$SETTINGS_XML" | base64 --decode > settings.xml
#       - run:
#            name: LS - ALL
#            command: ls -al
#       - run:
#            name: CAT
#            command: cat settings.xml
#       - circleci-maven-release-orb/run-maven-release

workflows:
  build_and_release:
    jobs:
#      - build
      - circleci-maven-release-orb/run-maven-release:
          mvn-release-perform-command: 'mvn --batch-mode release:perform -DdryRun=true -s settings.xml'
          ssh-fingerprints: 'c6:a8:13:50:90:d1:aa:db:1c:bf:51:31:e2:d5:61:ed'
      #    pre-steps:
      #      - run:
      #         name: Decode base 64
      #         command: echo "$SETTINGS_XML" | base64 --decode > settings.xml
          #requires:
          #  - prepare


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
#jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
#  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
#    docker:
 #     - image: cimg/openjdk:11.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
 #   steps:
      # Checkout the code as the first step.
 #     - checkout
      # Use mvn clean and package as the standard maven build phase
 #     - run:
 #         name: Build
 #         command: mvn -B -DskipTests clean package
      # Then run your tests!
 #     - run:
 #         name: Test
 #         command: mvn test
 #     - run:
 #         name: decrypt secrets
 #         command: gpg --no-tty --batch --passphrase "$GPG_PASS" --pinentry-mode loopback --output secrets.env --decrypt secrets.env.gpg

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
#workflows:
#  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
#    jobs:
#      - build-and-test
